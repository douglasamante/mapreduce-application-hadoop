# -*- coding: utf-8 -*-
"""amigos_gplus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JkDvKxVczq7wfPNw22ACNdUHhZkP1a4A
"""

# montar a drive e imports
import pandas as pd
import time
import random

from google.colab import drive
drive.mount('/content/drive')

# source http://snap.stanford.edu/data/ego-Facebook.html
# File path
filepath = '/content/drive/MyDrive/Colab Notebooks/Computação na Cloud (CC)/gplus_combined.csv'
# pandas to read dataset
dataset = pd.read_csv(filepath, delimiter=' ')
print("Dataset\n", dataset)

x = dataset.iloc[:, 0]
y = dataset.iloc[:, 1]


# Ids to search friends
friend0 = x[random.randint(0, 30494865)]
friend1 = x[random.randint(0, 30494865)]

# We cannot see mutual friends of the same user
if friend0 == friend1:
  while friend0 == friend1:
    friend0 = x[random.randint(0, 30494865)]
    friend1 = x[random.randint(0, 30494865)]

'''
# Ids for debugging in both
friend0 = str(109123727761757726835)
friend1 = str(100722679426961808186)
'''

count0 = 0
count1 = 0
t0 = time.time()

# Counting nº of friends to each ID
# Each line is: friend0 friend_0
#               friend0 friend_1
#               friend0 friend_2

# Computational Complexity: O(n+m)
for i in x:
  if friend0 == i:
    count0 += 1
  if friend1 == i:
    count1 += 1
t1 = time.time()

print('Delta t(s) = ', (t1-t0))
print('Nº of friends of %s: %d' %(friend0, count0))
print('Nº of friends of %s: %d' %(friend1, count1))

# Now counts the number of mutual friends
# Computational Complexity: O(n + n*m)
# Mutual Friends will be
mutual_friends = []
friends_in_common = 0
t0 = time.time()

# Fetch the friends of each and appends them to a list
for i in range(len(x)):
  if friend0 == x[i]:
    s = y[i] + '\t1'
    mutual_friends.append(s)
  if friend1 == x[i]:
    s = y[i] + '\t1'
    mutual_friends.append(s)

t1 = time.time()

# Now we sort the list (matches the MapReduce Job on Hadoop)
mutual_friends.sort()

# verify if there is any mutual friend
line = mutual_friends[0]
current_id, current_count = line.split('\t', 1)
current_count = int(current_count)
for i in range(1, len(mutual_friends)):
  line = mutual_friends[i]
  id, count = line.split('\t', 1)
  count = int(count)
  if current_id == id:
    current_count += 1
    if current_count == 2:
      friends_in_common += 1
  else:
    current_count = count
    current_id = id
  

t2 = time.time()

print('Delta fetch friends(s) = %.2f' %(t1-t0))
print('Delta mutual friends(s) = %.2f' %(t2-t1))
print('Delta Total(s) = %.2f' %(t2-t0))
print('Nº of mutual friends: ', friends_in_common)
